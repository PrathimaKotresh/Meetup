{"version":3,"sources":["Event.js","EventList.js","api.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","handleShowDetails","setState","className","this","props","event","local_time","local_date","name","group","yes_rsvp_count","venue","description","visibility","href","link","onClick","Component","EventList","events","map","key","id","getAccessToken","accessToken","localStorage","getItem","code","URLSearchParams","window","location","search","get","getOrRenewAccessToken","lastSavedTime","Date","now","type","a","url","axios","tokenInfo","setItem","data","access_token","refresh_token","getSuggestions","query","startsWith","city","country","localized_country_name","name_string","zip","lat","lon","token","result","getEvents","console","log","headers","CitySearch","suggestions","handleInputChanged","value","target","then","handleItemClicked","updateEvents","onChange","item","NumberOfEvents","numberOfEvents","errorMessage","handleOnChange","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23bf7cec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    showDetails: false,\r\n  };\r\n\r\n  handleShowDetails = () => {\r\n    if (this.state.showDetails === false) {\r\n      this.setState({ showDetails: true });\r\n    } else {\r\n      this.setState({ showDetails: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"event\">\r\n        <p className=\"event-localTimeAndDate\">\r\n          {this.props.event.local_time}{this.props.event.local_date}\r\n        </p>\r\n        <h3 className=\"event-name\">\r\n          {this.props.event.name}\r\n        </h3>\r\n        {this.props.event.group && this.props.event.group.name && (\r\n          <p className=\"event-groupName\">\r\n            {this.props.event.group.name}\r\n          </p>\r\n        )}\r\n        <p className=\"event-expectedParticipants\">\r\n          {this.props.event.yes_rsvp_count} 'people are going'\r\n        </p>\r\n        { this.state.showDetails && (\r\n          <div className=\"eventDetails\">\r\n            <p className=\"event-address\">\r\n              {this.props.event.venue.name}\r\n            </p>\r\n            <p className=\"event-description\">\r\n              {this.props.event.description}\r\n            </p>\r\n            <p className=\"event-visibility\">\r\n              {this.props.event.visibility}\r\n            </p>\r\n            <a className=\"event-link\" href={this.props.event.link} >Event link</a>\r\n          </div>\r\n        )}\r\n        <button className=\"event-detailsButton\" onClick={() => this.handleShowDetails()}>Details</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {\r\n          this.props.events.map(event =>\r\n            <li key={event.id}>\r\n              <Event event={event} />\r\n            </li>)\r\n        }\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;","import { mockEvents } from \"./mock-events\";\r\nimport axios from 'axios';\r\n\r\nfunction getAccessToken() {\r\n  const accessToken = localStorage.getItem(\"access_token\");\r\n\r\n  if (!accessToken) {\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = searchParams.get(\"code\");\r\n\r\n    if (!code) {\r\n      window.location.href =\r\n        \"https://secure.meetup.com/oauth2/authorize?client_id=sis872lca2hc15no0vei6kd1hc&response_type=code&redirect_uri=https://prathimakotresh.github.io/meetup/\";\r\n      return null;\r\n    }\r\n    return getOrRenewAccessToken(\"get\", code);\r\n  }\r\n\r\n  const lastSavedTime = localStorage.getItem(\"last_saved_time\");\r\n\r\n  if (accessToken && Date.now() - lastSavedTime < 3600000) {\r\n    return accessToken;\r\n  }\r\n\r\n  // If the access_token is expired, we try to renew it by using refresh_token\r\n  const refreshToken = localStorage.getItem(\"refresh_token\");\r\n  return getOrRenewAccessToken(\"renew\", refreshToken);\r\n}\r\n\r\nasync function getOrRenewAccessToken(type, key) {\r\n  let url;\r\n  if (type === 'get') {\r\n    // Lambda endpoint to get token by code\r\n    url = 'https://9ji2aqn1kh.execute-api.eu-central-1.amazonaws.com/dev/api/token/' + key;\r\n  }\r\n  else if (type === 'renew') {\r\n    // Lambda endpoint to get token by refresh_token\r\n    url = 'https://9ji2aqn1kh.execute-api.eu-central-1.amazonaws.com/dev/api/refreshedToken/' + key;\r\n  }\r\n  // Use Axios to make a GET request to the endpoint\r\n  const tokenInfo = await axios.get(url);\r\n  // Save tokens to localStorage together with a timestamp\r\n  localStorage.setItem('access_token',\r\n    tokenInfo.data.access_token);\r\n  localStorage.setItem('refresh_token',\r\n    tokenInfo.data.refresh_token);\r\n  localStorage.setItem('last_saved_time', Date.now());\r\n  // Return the access_token\r\n  return tokenInfo.data.access_token;\r\n}\r\n\r\nasync function getSuggestions(query) {\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    return [\r\n      {\r\n        city: 'Munich',\r\n        country: 'de',\r\n        localized_country_name: 'Germany',\r\n        name_string: 'Munich, Germany',\r\n        zip: 'meetup3',\r\n        lat: 48.14,\r\n        lon: 11.58\r\n      },\r\n      {\r\n        city: 'Munich',\r\n        country: 'us',\r\n        localized_country_name: 'USA',\r\n        state: 'ND',\r\n        name_string: 'Munich, North Dakota, USA',\r\n        zip: '58352',\r\n        lat: 48.66,\r\n        lon: -98.85\r\n      }\r\n    ];\r\n  }\r\n  const token = await getAccessToken();\r\n  if (token) {\r\n    const url =\r\n      'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\r\n      + query\r\n      + '&access_token=' + token;\r\n    const result = await axios.get(url);\r\n    return result.data;\r\n  }\r\n  return [];\r\n}\r\n\r\nasync function getEvents(lat, lon) {\r\n  /*if (window.location.href.startsWith('http://localhost')) {\r\n    return mockEvents.events;\r\n  }*/\r\n  const token = await getAccessToken();\r\n  console.log('token3 - ', token)\r\n  if (token) {\r\n    let url =\r\n      'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\r\n      + '&access_token=' + token;\r\n    // lat, lon is optional; if you have a lat and lon, you can add them\r\n    if (lat && lon) {\r\n      url += '&lat=' + lat + '&lon=' + lon;\r\n    }\r\n    const result = await axios.get(url, {\r\n      headers: {\r\n        'Access-Control-Allow-Origin': 'https://prathimakotresh.github.io/'\r\n      }\r\n    });\r\n    return result.data.events;\r\n  }\r\n  return [];\r\n}\r\n\r\nexport {\r\n  getSuggestions, getEvents\r\n};","import React, { Component } from 'react';\r\nimport { getSuggestions } from './api';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: []\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ query: value });\r\n    getSuggestions(value).then(suggestions =>\r\n      this.setState({ suggestions }));\r\n  }\r\n\r\n  handleItemClicked = (value, lat, lon) => {\r\n    this.setState({ query: value, suggestions: [] });\r\n    this.props.updateEvents(lat, lon);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map(item =>\r\n            <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)}>{item.name_string}</li>\r\n          )}\r\n        </ul>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    numberOfEvents: 32,\r\n    errorMessage: null\r\n  };\r\n\r\n  handleOnChange = (event) => {\r\n    const value = event.target.value;\r\n    if (value < 1) {\r\n      this.setState({ errorMessage: \"Please enter vaid number\" })\r\n    }\r\n    else {\r\n      this.setState({\r\n        errorMessage: null,\r\n        numberOfEvents: value\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"numberOfEvents\">\r\n        <label className=\"numberOfEvents-label\">Show number of Events</label>\r\n        <input value={this.state.numberOfEvents} className=\"numberOfEvents-number\" onChange={this.handleOnChange}></input>\r\n        {this.state.errorMessage && <p className=\"errorMessage\">{this.state.errorMessage}</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { getEvents } from './api';\n\nclass App extends Component {\n  state = { events: [] };\n\n  componentDidMount() {\n    console.log('test')\n    getEvents(null, null).then(\n      events => this.setState({ events })\n    );\n  }\n\n  updateEvents = (lat, lon) => {\n    getEvents(lat, lon).then(events => this.setState({ events }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch updateEvents={this.updateEvents} />\n        <NumberOfEvents />\n        <EventList events={this.state.events} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}